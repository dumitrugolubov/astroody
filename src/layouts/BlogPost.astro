---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import RelatedPosts from '../components/RelatedPosts.astro';

type Props = CollectionEntry<'blog'>['data'] & { slug: string };

const { title, description, pubDate, updatedDate, heroImage, tags = [], slug } = Astro.props;

// Calculate reading time
const content = await Astro.slots.render('default');
const words = content.split(/\s+/).length;
const readingTime = Math.ceil(words / 200); // Average reading speed of 200 words per minute

// Get all posts for related posts component
const posts = await getCollection('blog');
const currentPost = posts.find(post => post.slug === slug);

// Author information
const author = {
	"@type": "Person",
	"name": "Dmitrii Kilishek",
	"url": "https://x.com/t_dmi3",
	"image": "https://odyex.cc/odyssey-exchange.webp",
	"jobTitle": "Software Engineer",
	"sameAs": [
		"https://x.com/t_dmi3",
		"https://odyex.cc"
	]
};

// Prepare JSON-LD schema
const jsonLd = {
	"@context": "https://schema.org",
	"@type": "BlogPosting",
	"headline": title,
	"name": title,
	"description": description,
	"image": heroImage ? new URL(heroImage, Astro.site) : undefined,
	"datePublished": pubDate.toISOString(),
	"dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
	"author": author,
	"publisher": {
		"@type": "Organization",
		"name": "Odyex",
		"url": "https://odyex.cc",
		"logo": {
			"@type": "ImageObject",
			"url": new URL("/favicon.png", Astro.site)
		}
	},
	"keywords": tags.join(", "),
	"mainEntityOfPage": {
		"@type": "WebPage",
		"@id": new URL(Astro.url).toString()
	},
	"wordCount": words,
	"timeRequired": `PT${readingTime}M`,
	"inLanguage": "en-US",
	"url": new URL(Astro.url).toString(),
	"isAccessibleForFree": "True",
	"license": "https://creativecommons.org/licenses/by-sa/4.0/"
};
---

<html lang="en">
	<head>
		<BaseHead 
			title={title} 
			description={description} 
			image={heroImage}
			type="article"
			publishDate={pubDate}
			author={author.name}
		/>
		<script type="application/ld+json" set:html={JSON.stringify(jsonLd)} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
			.cta-container {
				text-align: center;
				margin: 2rem 0;
			}
			.reading-time {
				color: #666;
				font-size: 0.9em;
				margin-bottom: 1em;
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5em;
				margin: 1em 0;
			}
			.tag {
				background: #f0f0f0;
				padding: 0.3em 0.8em;
				border-radius: 3px;
				font-size: 0.9em;
				color: #666;
				text-decoration: none;
			}
			.share-buttons {
				display: flex;
				gap: 1em;
				margin: 2em 0;
			}
			.share-button {
				padding: 0.5em 1em;
				border-radius: 5px;
				color: white;
				text-decoration: none;
				display: inline-flex;
				align-items: center;
				gap: 0.5em;
			}
			.twitter { background: #1DA1F2; }
			.linkedin { background: #0077B5; }
			.facebook { background: #4267B2; }
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{updatedDate && (
								<div class="last-updated-on">
									Last updated on <FormattedDate date={updatedDate} />
								</div>
							)}
						</div>
						<h1>{title}</h1>
						<div class="reading-time">ðŸ“š {readingTime} min read</div>
						{tags.length > 0 && (
							<div class="tags">
								{tags.map((tag) => (
									<a href={`/tags/${tag}`} class="tag">#{tag}</a>
								))}
							</div>
						)}
						<hr />
					</div>
					<slot />
					<div class="share-buttons">
						<a 
							href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(Astro.url)}`}
							target="_blank"
							rel="noopener noreferrer"
							class="share-button twitter"
						>
							Share on Twitter
						</a>
						<a 
							href={`https://www.linkedin.com/shareArticle?mini=true&url=${encodeURIComponent(Astro.url)}&title=${encodeURIComponent(title)}`}
							target="_blank"
							rel="noopener noreferrer"
							class="share-button linkedin"
						>
							Share on LinkedIn
						</a>
						<a 
							href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(Astro.url)}`}
							target="_blank"
							rel="noopener noreferrer"
							class="share-button facebook"
						>
							Share on Facebook
						</a>
					</div>
					{currentPost && <RelatedPosts currentPost={currentPost} posts={posts} />}
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>